{
  "api/NanoByte.Razor2Pdf.IPdfModel.html": {
    "href": "api/NanoByte.Razor2Pdf.IPdfModel.html",
    "title": "Interface IPdfModel | Razor2Pdf",
    "keywords": "Interface IPdfModel Namespace NanoByte.Razor2Pdf Assembly NanoByte.Razor2Pdf.dll Interface for Razor Page Models for use with by PdfRenderer. public interface IPdfModel Properties ViewPath The path of the Razor View associated with this model. string ViewPath { get; } Property Value string"
  },
  "api/NanoByte.Razor2Pdf.IPdfRenderer.html": {
    "href": "api/NanoByte.Razor2Pdf.IPdfRenderer.html",
    "title": "Interface IPdfRenderer | Razor2Pdf",
    "keywords": "Interface IPdfRenderer Namespace NanoByte.Razor2Pdf Assembly NanoByte.Razor2Pdf.dll Renders Razor Pages as PDFs. public interface IPdfRenderer Methods RenderAsync(string) Renders a Razor View as a PDF. Task<FileStreamResult> RenderAsync(string viewPath) Parameters viewPath string The path of the Razor View to render. Returns Task<FileStreamResult> RenderAsync<T>(string, T) Renders a Razor View as a PDF. Task<FileStreamResult> RenderAsync<T>(string viewPath, T model) Parameters viewPath string The path of the Razor View to render. model T The model to pass to the Razor View. Returns Task<FileStreamResult> Type Parameters T RenderAsync<T>(T) Renders a Razor View as a PDF. Task<FileStreamResult> RenderAsync<T>(T model) where T : IPdfModel Parameters model T The model for the view to render. Returns Task<FileStreamResult> Type Parameters T"
  },
  "api/NanoByte.Razor2Pdf.IRazorViewRenderer.html": {
    "href": "api/NanoByte.Razor2Pdf.IRazorViewRenderer.html",
    "title": "Interface IRazorViewRenderer | Razor2Pdf",
    "keywords": "Interface IRazorViewRenderer Namespace NanoByte.Razor2Pdf Assembly NanoByte.Razor2Pdf.dll Renders Razor Views in-memory instead of providing an HTTP responses. public interface IRazorViewRenderer Methods RenderAsync<T>(string, T) Renders a Razor View. Task<string> RenderAsync<T>(string viewPath, T model) Parameters viewPath string The path of the Razor View to render. model T The model to pass to the Razor View. Returns Task<string> Type Parameters T"
  },
  "api/NanoByte.Razor2Pdf.PdfRenderer.html": {
    "href": "api/NanoByte.Razor2Pdf.PdfRenderer.html",
    "title": "Class PdfRenderer | Razor2Pdf",
    "keywords": "Class PdfRenderer Namespace NanoByte.Razor2Pdf Assembly NanoByte.Razor2Pdf.dll Renders Razor Pages as PDFs. public class PdfRenderer : IPdfRenderer Inheritance object PdfRenderer Implements IPdfRenderer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PdfRenderer(IRazorViewRenderer, IWebHostEnvironment) Renders Razor Pages as PDFs. public PdfRenderer(IRazorViewRenderer renderer, IWebHostEnvironment environment) Parameters renderer IRazorViewRenderer environment IWebHostEnvironment Methods RenderAsync(string) Renders a Razor View as a PDF. public Task<FileStreamResult> RenderAsync(string viewPath) Parameters viewPath string The path of the Razor View to render. Returns Task<FileStreamResult> RenderAsync<T>(string, T) Renders a Razor View as a PDF. public Task<FileStreamResult> RenderAsync<T>(string viewPath, T model) Parameters viewPath string The path of the Razor View to render. model T The model to pass to the Razor View. Returns Task<FileStreamResult> Type Parameters T RenderAsync<T>(T) Renders a Razor View as a PDF. public Task<FileStreamResult> RenderAsync<T>(T model) where T : IPdfModel Parameters model T The model for the view to render. Returns Task<FileStreamResult> Type Parameters T"
  },
  "api/NanoByte.Razor2Pdf.RazorViewRenderer.html": {
    "href": "api/NanoByte.Razor2Pdf.RazorViewRenderer.html",
    "title": "Class RazorViewRenderer | Razor2Pdf",
    "keywords": "Class RazorViewRenderer Namespace NanoByte.Razor2Pdf Assembly NanoByte.Razor2Pdf.dll Renders Razor Views in-memory instead of providing an HTTP responses. public class RazorViewRenderer : IRazorViewRenderer Inheritance object RazorViewRenderer Implements IRazorViewRenderer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RazorViewRenderer(IRazorViewEngine, ITempDataProvider, IHttpContextAccessor, IServiceProvider) Renders Razor Views in-memory instead of providing an HTTP responses. public RazorViewRenderer(IRazorViewEngine viewEngine, ITempDataProvider tempDataProvider, IHttpContextAccessor contextAccessor, IServiceProvider serviceProvider) Parameters viewEngine IRazorViewEngine tempDataProvider ITempDataProvider contextAccessor IHttpContextAccessor serviceProvider IServiceProvider Methods RenderAsync<T>(string, T) Renders a Razor View. public Task<string> RenderAsync<T>(string viewPath, T model) Parameters viewPath string The path of the Razor View to render. model T The model to pass to the Razor View. Returns Task<string> Type Parameters T"
  },
  "api/NanoByte.Razor2Pdf.ServiceCollectionExtensions.html": {
    "href": "api/NanoByte.Razor2Pdf.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Razor2Pdf",
    "keywords": "Class ServiceCollectionExtensions Namespace NanoByte.Razor2Pdf Assembly NanoByte.Razor2Pdf.dll public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddRazor2Pdf(IServiceCollection) Adds support for rendering Razor Pages as PDFs. public static IServiceCollection AddRazor2Pdf(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection"
  },
  "api/NanoByte.Razor2Pdf.html": {
    "href": "api/NanoByte.Razor2Pdf.html",
    "title": "Namespace NanoByte.Razor2Pdf | Razor2Pdf",
    "keywords": "Namespace NanoByte.Razor2Pdf Renders Razor Pages as PDFs. Classes PdfRenderer Renders Razor Pages as PDFs. RazorViewRenderer Renders Razor Views in-memory instead of providing an HTTP responses. ServiceCollectionExtensions Interfaces IPdfModel Interface for Razor Page Models for use with by PdfRenderer. IPdfRenderer Renders Razor Pages as PDFs. IRazorViewRenderer Renders Razor Views in-memory instead of providing an HTTP responses."
  },
  "api/Sample.Pages.IndexModel.html": {
    "href": "api/Sample.Pages.IndexModel.html",
    "title": "Class IndexModel | Razor2Pdf",
    "keywords": "Class IndexModel Namespace Sample.Pages Assembly Sample.dll public class IndexModel : PageModel, IAsyncPageFilter, IPageFilter, IFilterMetadata Inheritance object PageModel IndexModel Implements IAsyncPageFilter IPageFilter IFilterMetadata Inherited Members PageModel.TryUpdateModelAsync<TModel>(TModel) PageModel.TryUpdateModelAsync<TModel>(TModel, string) PageModel.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) PageModel.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) PageModel.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) PageModel.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) PageModel.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) PageModel.TryUpdateModelAsync(object, Type, string) PageModel.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) PageModel.BadRequest() PageModel.BadRequest(object) PageModel.BadRequest(ModelStateDictionary) PageModel.Challenge() PageModel.Challenge(params string[]) PageModel.Challenge(AuthenticationProperties) PageModel.Challenge(AuthenticationProperties, params string[]) PageModel.Content(string) PageModel.Content(string, string) PageModel.Content(string, string, Encoding) PageModel.Content(string, MediaTypeHeaderValue) PageModel.Forbid() PageModel.Forbid(params string[]) PageModel.Forbid(AuthenticationProperties) PageModel.Forbid(AuthenticationProperties, params string[]) PageModel.File(byte[], string) PageModel.File(byte[], string, string) PageModel.File(Stream, string) PageModel.File(Stream, string, string) PageModel.File(string, string) PageModel.File(string, string, string) PageModel.LocalRedirect(string) PageModel.LocalRedirectPermanent(string) PageModel.LocalRedirectPreserveMethod(string) PageModel.LocalRedirectPermanentPreserveMethod(string) PageModel.NotFound() PageModel.NotFound(object) PageModel.Page() PageModel.PhysicalFile(string, string) PageModel.PhysicalFile(string, string, string) PageModel.Redirect(string) PageModel.RedirectPermanent(string) PageModel.RedirectPreserveMethod(string) PageModel.RedirectPermanentPreserveMethod(string) PageModel.RedirectToAction(string) PageModel.RedirectToAction(string, object) PageModel.RedirectToAction(string, string) PageModel.RedirectToAction(string, string, object) PageModel.RedirectToAction(string, string, string) PageModel.RedirectToAction(string, string, object, string) PageModel.RedirectToActionPreserveMethod(string, string, object, string) PageModel.RedirectToActionPermanent(string) PageModel.RedirectToActionPermanent(string, object) PageModel.RedirectToActionPermanent(string, string) PageModel.RedirectToActionPermanent(string, string, string) PageModel.RedirectToActionPermanent(string, string, object) PageModel.RedirectToActionPermanent(string, string, object, string) PageModel.RedirectToActionPermanentPreserveMethod(string, string, object, string) PageModel.RedirectToRoute(string) PageModel.RedirectToRoute(object) PageModel.RedirectToRoute(string, object) PageModel.RedirectToRoute(string, string) PageModel.RedirectToRoute(string, object, string) PageModel.RedirectToRoutePreserveMethod(string, object, string) PageModel.RedirectToRoutePermanent(string) PageModel.RedirectToRoutePermanent(object) PageModel.RedirectToRoutePermanent(string, object) PageModel.RedirectToRoutePermanent(string, string) PageModel.RedirectToRoutePermanent(string, object, string) PageModel.RedirectToRoutePermanentPreserveMethod(string, object, string) PageModel.RedirectToPage() PageModel.RedirectToPage(object) PageModel.RedirectToPage(string) PageModel.RedirectToPage(string, string) PageModel.RedirectToPage(string, string, object) PageModel.RedirectToPage(string, object) PageModel.RedirectToPage(string, string, string) PageModel.RedirectToPage(string, string, object, string) PageModel.RedirectToPagePermanent(string) PageModel.RedirectToPagePermanent(string, object) PageModel.RedirectToPagePermanent(string, string) PageModel.RedirectToPagePermanent(string, string, object) PageModel.RedirectToPagePermanent(string, string, string) PageModel.RedirectToPagePermanent(string, object, string) PageModel.RedirectToPagePermanent(string, string, object, string) PageModel.RedirectToPagePreserveMethod(string, string, object, string) PageModel.RedirectToPagePermanentPreserveMethod(string, string, object, string) PageModel.SignIn(ClaimsPrincipal, string) PageModel.SignIn(ClaimsPrincipal, AuthenticationProperties, string) PageModel.SignOut(params string[]) PageModel.SignOut(AuthenticationProperties, params string[]) PageModel.StatusCode(int) PageModel.StatusCode(int, object) PageModel.Unauthorized() PageModel.Partial(string) PageModel.Partial(string, object) PageModel.ViewComponent(string) PageModel.ViewComponent(Type) PageModel.ViewComponent(string, object) PageModel.ViewComponent(Type, object) PageModel.TryValidateModel(object) PageModel.TryValidateModel(object, string) PageModel.OnPageHandlerSelected(PageHandlerSelectedContext) PageModel.OnPageHandlerExecuting(PageHandlerExecutingContext) PageModel.OnPageHandlerExecuted(PageHandlerExecutedContext) PageModel.OnPageHandlerSelectionAsync(PageHandlerSelectedContext) PageModel.OnPageHandlerExecutionAsync(PageHandlerExecutingContext, PageHandlerExecutionDelegate) PageModel.PageContext PageModel.HttpContext PageModel.Request PageModel.Response PageModel.RouteData PageModel.ModelState PageModel.User PageModel.TempData PageModel.Url PageModel.MetadataProvider PageModel.ViewData object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IndexModel(IPdfRenderer) public IndexModel(IPdfRenderer pdfRenderer) Parameters pdfRenderer IPdfRenderer Properties Name [BindProperty] public string Name { get; set; } Property Value string Methods OnPostReportAsync() public Task<FileStreamResult> OnPostReportAsync() Returns Task<FileStreamResult>"
  },
  "api/Sample.Pages.ReportModel.html": {
    "href": "api/Sample.Pages.ReportModel.html",
    "title": "Class ReportModel | Razor2Pdf",
    "keywords": "Class ReportModel Namespace Sample.Pages Assembly Sample.dll public class ReportModel : PageModel, IAsyncPageFilter, IPageFilter, IFilterMetadata, IPdfModel Inheritance object PageModel ReportModel Implements IAsyncPageFilter IPageFilter IFilterMetadata IPdfModel Inherited Members PageModel.TryUpdateModelAsync<TModel>(TModel) PageModel.TryUpdateModelAsync<TModel>(TModel, string) PageModel.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) PageModel.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) PageModel.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) PageModel.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) PageModel.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) PageModel.TryUpdateModelAsync(object, Type, string) PageModel.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) PageModel.BadRequest() PageModel.BadRequest(object) PageModel.BadRequest(ModelStateDictionary) PageModel.Challenge() PageModel.Challenge(params string[]) PageModel.Challenge(AuthenticationProperties) PageModel.Challenge(AuthenticationProperties, params string[]) PageModel.Content(string) PageModel.Content(string, string) PageModel.Content(string, string, Encoding) PageModel.Content(string, MediaTypeHeaderValue) PageModel.Forbid() PageModel.Forbid(params string[]) PageModel.Forbid(AuthenticationProperties) PageModel.Forbid(AuthenticationProperties, params string[]) PageModel.File(byte[], string) PageModel.File(byte[], string, string) PageModel.File(Stream, string) PageModel.File(Stream, string, string) PageModel.File(string, string) PageModel.File(string, string, string) PageModel.LocalRedirect(string) PageModel.LocalRedirectPermanent(string) PageModel.LocalRedirectPreserveMethod(string) PageModel.LocalRedirectPermanentPreserveMethod(string) PageModel.NotFound() PageModel.NotFound(object) PageModel.Page() PageModel.PhysicalFile(string, string) PageModel.PhysicalFile(string, string, string) PageModel.Redirect(string) PageModel.RedirectPermanent(string) PageModel.RedirectPreserveMethod(string) PageModel.RedirectPermanentPreserveMethod(string) PageModel.RedirectToAction(string) PageModel.RedirectToAction(string, object) PageModel.RedirectToAction(string, string) PageModel.RedirectToAction(string, string, object) PageModel.RedirectToAction(string, string, string) PageModel.RedirectToAction(string, string, object, string) PageModel.RedirectToActionPreserveMethod(string, string, object, string) PageModel.RedirectToActionPermanent(string) PageModel.RedirectToActionPermanent(string, object) PageModel.RedirectToActionPermanent(string, string) PageModel.RedirectToActionPermanent(string, string, string) PageModel.RedirectToActionPermanent(string, string, object) PageModel.RedirectToActionPermanent(string, string, object, string) PageModel.RedirectToActionPermanentPreserveMethod(string, string, object, string) PageModel.RedirectToRoute(string) PageModel.RedirectToRoute(object) PageModel.RedirectToRoute(string, object) PageModel.RedirectToRoute(string, string) PageModel.RedirectToRoute(string, object, string) PageModel.RedirectToRoutePreserveMethod(string, object, string) PageModel.RedirectToRoutePermanent(string) PageModel.RedirectToRoutePermanent(object) PageModel.RedirectToRoutePermanent(string, object) PageModel.RedirectToRoutePermanent(string, string) PageModel.RedirectToRoutePermanent(string, object, string) PageModel.RedirectToRoutePermanentPreserveMethod(string, object, string) PageModel.RedirectToPage() PageModel.RedirectToPage(object) PageModel.RedirectToPage(string) PageModel.RedirectToPage(string, string) PageModel.RedirectToPage(string, string, object) PageModel.RedirectToPage(string, object) PageModel.RedirectToPage(string, string, string) PageModel.RedirectToPage(string, string, object, string) PageModel.RedirectToPagePermanent(string) PageModel.RedirectToPagePermanent(string, object) PageModel.RedirectToPagePermanent(string, string) PageModel.RedirectToPagePermanent(string, string, object) PageModel.RedirectToPagePermanent(string, string, string) PageModel.RedirectToPagePermanent(string, object, string) PageModel.RedirectToPagePermanent(string, string, object, string) PageModel.RedirectToPagePreserveMethod(string, string, object, string) PageModel.RedirectToPagePermanentPreserveMethod(string, string, object, string) PageModel.SignIn(ClaimsPrincipal, string) PageModel.SignIn(ClaimsPrincipal, AuthenticationProperties, string) PageModel.SignOut(params string[]) PageModel.SignOut(AuthenticationProperties, params string[]) PageModel.StatusCode(int) PageModel.StatusCode(int, object) PageModel.Unauthorized() PageModel.Partial(string) PageModel.Partial(string, object) PageModel.ViewComponent(string) PageModel.ViewComponent(Type) PageModel.ViewComponent(string, object) PageModel.ViewComponent(Type, object) PageModel.TryValidateModel(object) PageModel.TryValidateModel(object, string) PageModel.OnPageHandlerSelected(PageHandlerSelectedContext) PageModel.OnPageHandlerExecuting(PageHandlerExecutingContext) PageModel.OnPageHandlerExecuted(PageHandlerExecutedContext) PageModel.OnPageHandlerSelectionAsync(PageHandlerSelectedContext) PageModel.OnPageHandlerExecutionAsync(PageHandlerExecutingContext, PageHandlerExecutionDelegate) PageModel.PageContext PageModel.HttpContext PageModel.Request PageModel.Response PageModel.RouteData PageModel.ModelState PageModel.User PageModel.TempData PageModel.Url PageModel.MetadataProvider PageModel.ViewData object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name public required string Name { get; set; } Property Value string ViewPath The path of the Razor View associated with this model. public string ViewPath { get; } Property Value string"
  },
  "api/Sample.Pages.html": {
    "href": "api/Sample.Pages.html",
    "title": "Namespace Sample.Pages | Razor2Pdf",
    "keywords": "Namespace Sample.Pages Classes IndexModel ReportModel"
  },
  "index.html": {
    "href": "index.html",
    "title": "Home | Razor2Pdf",
    "keywords": "Razor2Pdf Razor2Pdf renders ASP.NET Core Razor Pages as PDFs using WeasyPrint. Usage Ensure that the weasyprint command is in your PATH. You can: follow the WeasyPrint installation instructions or use our ASP.NET Core Runtime and WeasyPrint Docker image. Add a reference to the NanoByte.Razor2Pdf NuGet package to your project. Add a call to services.AddRazor2Pdf() in your ConfigureServices() method in Startup.cs. You can now use dependency injection to get an instance of IPdfRenderer and use it like this: FileStreamResult result = await pdfRenderer.RenderAsync(\"path/to/my/view\", new MyViewModel(...)); See the sample project for more details."
  }
}